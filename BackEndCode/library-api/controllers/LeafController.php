<?php
// save_fastboardData修改
namespace app\controllers;

use Yii;
use Datetime;
use Yii\helpers\ArrayHelper;
use yii\base\Model;
use app\models\Gardener;
use app\models\Leaf;
use app\models\AccessToken;
use app\models\Normalleaf;
use app\models\Managerofleaf;
use app\models\Gardenerofleaf;
use yii\filters\AccessRule;
use app\models\Reportrecord;
use app\models\MyFavorite;
use app\models\MyHate;
use yii\web\UploadedFile;
use app\models\Fastboard;
use yii\filters\auth\QueryParamAuth; //new add

class LeafController extends BaseController
{
    public $modelClass = 'app\models\Leaf';

    public $link;
    public $founder_firstname;
    public int $attendence_of_leaf;

    public function actions()
    {
        $action = parent::actions(); // TODO: Change the autogenerated stub
        unset($action['index']);
        unset($action['create']);
        unset($action['update']);
        unset($action['delete']);
        return $action;
    }
    public function actionCreate() //POST
    {
        $request = Yii::$app->request;
        $post = $request->post();
        return Leaf::find()->where($post)->all();
    }
    public function actionIndex() //GET
    {
        return Leaf::find()->all();
    }
    public function init()
    {
        parent::init();
        Yii::$app->user->enableSession = false;
    }

    public function beforeAction($action)
    {
        if ($action->id === 'catch-link' or $action->id === 'save-record') { // disable-room
            $this->enableCsrfValidation = false; // 可选：如果登录不需要 CSRF 验证，可以禁用
            $this->detachBehavior('authenticator'); // 解除认证行为
        }
        return parent::beforeAction($action);
    }

    public function actionSaveRecord() //Post
    {
        $leaf = new Leaf();


        $post = file_get_contents('php://input'); //获取请求体
        $post = json_decode($post, true); //解析成数组


        // leaf_id
        $leaf_id = Yii::$app->request->post('leaf_id');
        $leaf->leaf_id = $leaf_id;


        $leaf->file = UploadedFile::getInstanceByName('file');
        if ($leaf->file === null) {
            return [[
                "error_message" => "檔案為空",
            ]];
        } else {
            return [
                $leaf->saveVideo()
            ];
        }
    }

    public function actionShowGardenerLeafFile() //Post
    {
        $gar_file = new Leaf();
        $post = file_get_contents('php://input'); //获取请求体
        $post = json_decode($post, true); //解析成数组
        // leaf_id
        $leaf_id = $post['leaf_id'];
        $gar_file->leaf_id = $leaf_id;
        // account
        $gardener_account = $post['gardener_account'];
        $gar_file->gardener_account = $gardener_account;
        return [
            $gar_file->showGardenerFile()
        ];
    }

    public function actionCreateNormalLeaf() //Post
    {
        $user = Yii::$app->user->identity;

        $leaf = new Leaf();

        $post = file_get_contents('php://input'); //获取请求体
        $post = json_decode($post, true); //解析成数组

        // founder
        $leaf->founder_id = $user->gardener_id;

        // speaker
        $speaker_account = Yii::$app->request->post('speaker_account');
        $leaf->speaker_account = $speaker_account;

        // manager
        $manager_account = Yii::$app->request->post('manager_account');
        $leaf->manager_account = $manager_account;

        // leaf_type
        $leaf_type = Yii::$app->request->post('leaf_type');
        $leaf->leaf_type = $leaf_type;

        // 普通模式 leaf_model = 1
        $leaf_model = 1;
        $leaf->leaf_model = $leaf_model;

        // region
        $region = Yii::$app->request->post('region');
        // file
        if (Yii::$app->request->isPost) {
            // 上传文件接收
            if (!($leaf->file = UploadedFile::getInstanceByName('file'))) {
                return [[
                    'error_message' => "No file."
                ]];
            }
        } else {
            return [[
                'error_message' => "非法訪問"
            ]];
        }
        // fastboard
        $sdkToken = file_get_contents('/Users/Minna/library-api/library-api/library-api/sdkToken.txt');
        $appIdentifier = file_get_contents('/Users/Minna/library-api/library-api/library-api/AppIdentifier.txt');
        // $sdkToken = file_get_contents('C:/Users/user/桌面/api_file_test/fastboard/sdkToken.txt');
        // $appIdentifier = file_get_contents('C:/Users/user/桌面/api_file_test/fastboard/AppIdentifier.txt');
        // $sdkToken = file_get_contents('C:/xampp/htdocs/library-api/library-api/sdkToken.txt');
        // $appIdentifier = file_get_contents('C:/xampp/htdocs/library-api/library-api/AppIdentifier.txt');

        $options = [
            'headers' => [
                'token' => $sdkToken,
                'Content-Type' => 'application/json', //回傳json格式
                'region' => $region,
            ],
            'json' => [
                'isRecord' => false, //不可錄製，查到說錄製要花錢
            ],
        ];
        $options2 = [
            'headers' => [
                'token' => $sdkToken,
                'Content-Type' => 'application/json', //回傳json格式
                'region' => $region,
            ],
            'json' => [
                "lifespan" => 0, // roomToken時效  (要去server改)
                "role" => "admin",
            ],
        ];
        $fastboard = new Fastboard();
        // 呼叫第三方 API
        $client = new \GuzzleHttp\Client();
        $response = $client->request('POST', 'https://api.netless.link/v5/rooms', $options);
        // 取得 API 回應的內容字串 (JSON 格式)
        $responseBody = $response->getBody()->getContents();
        // 將 JSON 格式的回應轉換成 PHP 陣列
        $responseData = json_decode($responseBody, true);
        // 檢查是否成功取得 uuid 的值
        if (isset($responseData['uuid'])) {
            $uuid = $responseData['uuid'];
            // 將 $uuid 用於第二個呼叫的 URL 中
            $response2 = $client->request('POST', 'https://api.netless.link/v5/tokens/rooms/' . $uuid, $options2);
            // 取得回應的 JSON 值
            $responseData2 = json_decode($response2->getBody(), true);

            // uuid要傳到兩個model
            $fastboard->uuid = $responseData['uuid'];
            $leaf->uuid = $responseData['uuid'];

            $fastboard->teamUUID = $responseData['teamUUID'];
            $fastboard->appUUID = $responseData['appUUID'];
            $fastboard->roomToken = $responseData2;

            // 原本的日期時間格式
            $createdAt = $responseData['createdAt'];
            // 將日期時間轉換為 DateTime 物件
            $dateTime = new DateTime($createdAt);
            // 將日期時間格式轉換為 MySQL 所接受的格式
            $formattedDateTime = $dateTime->format('Y-m-d H:i:s');
            $fastboard->createdAt = $formattedDateTime;
            // 傳agora資料到model
            $leaf->responseData = $responseData;
            $leaf->responseData2 = $responseData2;
            $leaf->appIdentifier = $appIdentifier;
            // 存資料進資料庫
            $fastboard->save_fastboardData();

            return [
                $leaf->generateNormalLeaf(),
            ];
        } //
        else {
            return [[
                'error_message' => "Failed to get data."
            ]];
        }
    }

    public function actionCreateWhiteLeaf() //Post
    {
        $user = Yii::$app->user->identity;

        $leaf = new Leaf();

        $post = file_get_contents('php://input'); //获取请求体
        $post = json_decode($post, true); //解析成数组
        // founder
        $leaf->founder_id = $user->gardener_id;
        // 無speaker
        $speaker_num = 0;
        $leaf->speaker_num = $speaker_num;
        // 無manager
        $manager_num = 0;
        $leaf->manager_num = $manager_num;
        // 空白模式 leaf_model = 0
        $leaf_model = 0;
        $leaf->leaf_model = $leaf_model;
        // leaf_name
        $leaf_name = $post['leaf_name'];
        $leaf->leaf_name = $leaf_name;

        // fastboard
        $sdkToken = file_get_contents('/Users/Minna/library-api/library-api/library-api/sdkToken.txt');
        $appIdentifier = file_get_contents('/Users/Minna/library-api/library-api/library-api/AppIdentifier.txt');
        // $sdkToken = file_get_contents('C:/Users/user/桌面/api_file_test/fastboard/sdkToken.txt');
        // $appIdentifier = file_get_contents('C:/Users/user/桌面/api_file_test/fastboard/AppIdentifier.txt');
        // $sdkToken = file_get_contents('C:/xampp/htdocs/library-api/library-api/sdkToken.txt');
        // $appIdentifier = file_get_contents('C:/xampp/htdocs/library-api/library-api/AppIdentifier.txt');

        $region = $post['region'];

        $options = [
            'headers' => [
                'token' => $sdkToken,
                'Content-Type' => 'application/json', //回傳json格式
                'region' => $region,
            ],
            'json' => [
                'isRecord' => false, //不可錄製，查到說錄製要花錢
            ],
        ];
        $options2 = [
            'headers' => [
                'token' => $sdkToken,
                'Content-Type' => 'application/json', //回傳json格式
                'region' => $region,
            ],
            'json' => [
                "lifespan" => 0, // roomToken時效  (要去server改)
                "role" => "writer",
            ],
        ];
        $fastboard = new Fastboard();
        // 呼叫第三方 API
        $client = new \GuzzleHttp\Client();
        $response = $client->request('POST', 'https://api.netless.link/v5/rooms', $options);
        // 取得 API 回應的內容字串 (JSON 格式)
        $responseBody = $response->getBody()->getContents();
        // 將 JSON 格式的回應轉換成 PHP 陣列
        $responseData = json_decode($responseBody, true);
        // 檢查是否成功取得 uuid 的值
        if (isset($responseData['uuid'])) {
            $uuid = $responseData['uuid'];
            // 將 $uuid 用於第二個呼叫的 URL 中
            $response2 = $client->request('POST', 'https://api.netless.link/v5/tokens/rooms/' . $uuid, $options2);
            // 取得回應的 JSON 值
            $responseData2 = json_decode($response2->getBody(), true);

            // uuid要傳到兩個model
            $leaf->uuid = $responseData['uuid'];
            $fastboard->uuid = $responseData['uuid'];

            $fastboard->teamUUID = $responseData['teamUUID'];
            $fastboard->appUUID = $responseData['appUUID'];
            $fastboard->roomToken = $responseData2;

            // 原本的日期時間格式
            $createdAt = $responseData['createdAt'];
            // 將日期時間轉換為 DateTime 物件
            $dateTime = new DateTime($createdAt);
            // 將日期時間格式轉換為 MySQL 所接受的格式
            $formattedDateTime = $dateTime->format('Y-m-d H:i:s');
            $fastboard->createdAt = $formattedDateTime;
            // 傳agora資料到model
            $leaf->responseData = $responseData;
            $leaf->responseData2 = $responseData2;
            $leaf->appIdentifier = $appIdentifier;
            // 存資料進資料庫
            $fastboard->save_fastboardData();
            return [
                $leaf->generateWhiteLeaf()
            ];
        } //
        else {
            return [[
                'error_message' => "Failed to get data."
            ]];
        }
    }

    public function actionReport() //Post 新增一筆舉報紀錄
    {
        $report_record = new Reportrecord();
        $post = file_get_contents('php://input'); //获取请求体
        $post = json_decode($post, true); //解析成数组
        // leaf_id
        $leaf_id = $post['leaf_id'];
        $report_record->leaf_id = $leaf_id;
        // 舉報的人
        $whistleblower_account = $post['whistleblower_account'];
        $report_record->whistleblower_account = $whistleblower_account;
        // 被舉報的人
        $respondent_account = $post['respondent_account'];
        $report_record->respondent_account = $respondent_account;
        return [
            $report_record->generateReport()
        ];
    }

    public function actionAddMyFavorite() //Post A把B加入我的最愛
    {
        $my_favorite = new MyFavorite();
        $post = file_get_contents('php://input'); //获取请求体
        $post = json_decode($post, true); //解析成数组
        // leaf_id
        $leaf_id = $post['leaf_id'];
        $my_favorite->leaf_id = $leaf_id;
        // A
        $adder_account = $post['adder_account'];
        $my_favorite->adder_account = $adder_account;
        // B
        $added_account = $post['added_account'];
        $my_favorite->added_account = $added_account;
        return [
            $my_favorite->generateMyFavorite()
        ];
    }

    public function actionAddMyHate() //Post A把B屏蔽
    {
        $my_hate = new MyHate();
        $post = file_get_contents('php://input'); //获取请求体
        $post = json_decode($post, true); //解析成数组
        // leaf_id
        $leaf_id = $post['leaf_id'];
        $my_hate->leaf_id = $leaf_id;
        // A
        $adder_account = $post['adder_account'];
        $my_hate->adder_account = $adder_account;
        // B
        $added_account = $post['added_account'];
        $my_hate->added_account = $added_account;
        return [
            $my_hate->generateMyHate()
        ];
    }

    public function actionShowMyFavorite() //show 我的最愛
    {
        $my_favorite = new MyFavorite();
        $post = file_get_contents('php://input'); //获取请求体
        $post = json_decode($post, true); //解析成数组
        // leaf_id
        $leaf_id = $post['leaf_id'];
        $gardener_id = $post['gardener_id'];
        $my_favorite->leaf_id = $leaf_id;
        $my_favorite->adder_account = $gardener_id;
        return [
            $my_favorite->showMyFavorite()
        ];
    }

    public function actionDisableRoom()
    {
        $user = Yii::$app->user->identity;

        $fastboard = new Fastboard();
        $leaf = new Leaf();
        // $sdkToken = file_get_contents('C:/xampp/htdocs/library-api/library-api/sdkToken.txt');
        $sdkToken = file_get_contents('/Users/Minna/library-api/library-api/library-api/sdkToken.txt');

        $post = file_get_contents('php://input'); //获取请求体
        $post =  json_decode($post, true); //解析成数组

        $region = $post['region'];
        $uuid = $post['uuid']; //要給我要被ban的房間號
        $fastboard->uuid = $uuid;
        $leaf->uuid = $uuid;
        $leaf->founder_id = $user->gardener_id;

        $is_true = $leaf->isTrue(); //判斷情形，只有1給過

        if ($is_true == 1) {
            $options = [
                'headers' => [
                    'token' => $sdkToken,
                    'Content-Type' => 'application/json', //回傳json格式
                    'region' => $region,
                ],
                'json' => [
                    'isBan' => true, //更新成被ban
                ],
            ];

            $client = new \GuzzleHttp\Client();
            $response = $client->request('PATCH', 'https://api.netless.link/v5/rooms/' . $uuid, $options);
            $responseData = json_decode($response->getBody(), true);

            if ($response) {
                $fastboard->DisableRoom();
                return [$responseData];
            } else {
                return [
                    'error_message' => "agora沒有正確回應"
                ];
            }
        }
        //0
        else {
            return [[
                'error_message' => $is_true,
            ]];
        }
    }

    public function actionCatchLink()
    {
        $leaf = new Leaf();
        $post = file_get_contents('php://input'); //获取请求体
        $post = json_decode($post, true); //解析成数组
        // leaf
        $link = $post['link']; // vsdmnvlks.abc
        $leaf->link = $link;

        return [
            $leaf->CatchLink()
        ];
    }
}
